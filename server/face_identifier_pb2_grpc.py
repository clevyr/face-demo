# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import face_identifier_pb2 as face__identifier__pb2


class IdentifierStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Identify = channel.unary_unary(
                '/FaceIdentifier.Identifier/Identify',
                request_serializer=face__identifier__pb2.IdentifyRequest.SerializeToString,
                response_deserializer=face__identifier__pb2.IdentifyReply.FromString,
                )
        self.IdentifyImage = channel.stream_unary(
                '/FaceIdentifier.Identifier/IdentifyImage',
                request_serializer=face__identifier__pb2.IdentifyImageRequest.SerializeToString,
                response_deserializer=face__identifier__pb2.IdentifyReply.FromString,
                )


class IdentifierServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Identify(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IdentifyImage(self, request_iterator, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IdentifierServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Identify': grpc.unary_unary_rpc_method_handler(
                    servicer.Identify,
                    request_deserializer=face__identifier__pb2.IdentifyRequest.FromString,
                    response_serializer=face__identifier__pb2.IdentifyReply.SerializeToString,
            ),
            'IdentifyImage': grpc.stream_unary_rpc_method_handler(
                    servicer.IdentifyImage,
                    request_deserializer=face__identifier__pb2.IdentifyImageRequest.FromString,
                    response_serializer=face__identifier__pb2.IdentifyReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FaceIdentifier.Identifier', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Identifier(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Identify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FaceIdentifier.Identifier/Identify',
            face__identifier__pb2.IdentifyRequest.SerializeToString,
            face__identifier__pb2.IdentifyReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IdentifyImage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/FaceIdentifier.Identifier/IdentifyImage',
            face__identifier__pb2.IdentifyImageRequest.SerializeToString,
            face__identifier__pb2.IdentifyReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
